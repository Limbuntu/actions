name: Build vscode server android
on:
  workflow_dispatch:
    inputs:
      commit:
        description: "git commit:"
        default: 1a5daa3a0231a0fbba4f14db7ec463cf99d7768e
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        tasks:
          [
            vscode-reh-web-android-arm64-min,
            vscode-reh-web-android-arm64
          ]

    steps:
      - uses: actions/checkout@main
      - name: Checkout repository
        run: |
          env
          cat /proc/cpuinfo
          tree -L 2 ${GITHUB_WORKSPACE}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.0
        with:
          # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
          node-version: 18.15.0

      - name: Fetch source code and patch
        run: |
          git clone https://github.com/microsoft/vscode
          cd vscode
          git checkout ${{ github.event.inputs.commit }}

          if test -f ${GITHUB_WORKSPACE}/packages/vscode/custom.patch; then
            echo "Patching source code..."
            patch --strip=1 < ${GITHUB_WORKSPACE}/packages/vscode/custom.patch --no-backup-if-mismatch -t
          fi

      - name: Build
        run: |
          cd vscode
          build_task() {
            node -e 'console.log(process.version, process.arch, process.platform)'
            ## Electron and browsers are not required
            ## for code-server build.
            export ELECTRON_SKIP_BINARY_DOWNLOAD=1
            export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

            sudo apt update
            sudo apt install build-essential python-is-python3
            yarn global add node-gyp

            matrix_task="$1"
            case "${matrix_task}" in
            vscode-reh-web-linux-x64*)
              sudo apt install g++ libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev
              yarn || yarn
              yarn gulp $matrix_task
              ;;
            vscode-reh-web-linux-arm64*)
              sudo apt install qemu-user-static binfmt-support debootstrap gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              TARGET=aarch64-linux-gnu
              SYSROOT=${PWD}/../aarch64-linux-ubuntu
              ## aarch64 rootfs
              sudo debootstrap --variant=minbase --arch=arm64 --include="libx11-dev,libxkbfile-dev,libsecret-1-dev,libkrb5-dev" stable "${SYSROOT}" http://deb.debian.org/debian/
              export CC="$(which ${TARGET}-gcc) --sysroot=${SYSROOT}"
              export CXX="$(which ${TARGET}-g++) --sysroot=${SYSROOT}"
              export npm_config_arch=aarch64
              yarn || yarn
              yarn gulp $matrix_task
              ;;
            vscode-reh-web-android-arm64*)
              sudo apt install qemu-user-static binfmt-support debootstrap gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              TARGET=aarch64-linux-gnu
              SYSROOT=${PWD}/../aarch64-linux-ubuntu

              ## aarch64 rootfs
              sudo debootstrap --variant=minbase --arch=arm64 --include="libx11-dev,libxkbfile-dev,libsecret-1-dev,libkrb5-dev" stable "${SYSROOT}" http://deb.debian.org/debian/

              export npm_config_arch=aarch64
              export GYP_DEFINES="host_os=linux OS=android"

              ## Android libutil
              _TMP_BUILD_DIR="${PWD}/../tmp_build"
              mkdir -p "${_TMP_BUILD_DIR}/lib"
              echo "INPUT(-lc)" >"${_TMP_BUILD_DIR}/lib/libutil.so"

              NDK_BIN_DIR=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
              TARGET=aarch64-linux-android24

              NDK_BIN_DIR=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
              export CC="$(command -v "${NDK_BIN_DIR}/clang++") --target=${TARGET} --system=${SYSROOT}"
              export CXX="$(command -v "${NDK_BIN_DIR}/clang++") --target=${TARGET} -L${_TMP_BUILD_DIR}/lib --system=${SYSROOT}"


              yarn || yarn
              yarn gulp "$(echo "${matrix_task}" | sed 's/android/linux/')"
              mv "${PWD}/../vscode-reh-web-linux-arm64" "${PWD}/../vscode-reh-web-android-arm64"
              ;;
            esac
          }

          build_task "${{ matrix.tasks }}"

      - name: Test output
        run: |
          tree -L 1

      - name: Package
        run: |
          find -maxdepth 1 -name "vscode-*" -type d | while IFS= read -r dir; do
            tar -c "${dir}" | xz -T0 > "${dir}".tar.xz
          done

      - name: Upload
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.tasks }}
          path: vscode-*.tar.xz
