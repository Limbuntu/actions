name: Tmp build vscode server
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        tasks:
          [
            vscode-reh-web-linux-x64-min,
            vscode-reh-web-linux-x64,
            vscode-reh-web-linux-arm64-min,
            vscode-reh-web-linux-arm64,
            vscode-reh-web-android-arm64-min,
            vscode-reh-web-android-arm64
          ]

    steps:
      - uses: actions/checkout@main
      - name: Checkout repository
        run: |
          env
          cat /proc/cpuinfo
          tree -L 2 ${GITHUB_WORKSPACE}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.0
        with:
          # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
          node-version: 18.15.0

      - name: Fetch source code and patch
        run: |
          git clone https://github.com/zongou/vscode --branch Splizard/vscode-mobile --single-branch --depth=1
          cd vscode

      - name: Build
        run: |
          cd vscode
          build_task() {
            node -e 'console.log(process.version, process.arch, process.platform)'
            ## Electron and browsers are not required
            ## for code-server build.
            export ELECTRON_SKIP_BINARY_DOWNLOAD=1
            export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

            sudo apt update
            sudo apt install build-essential python-is-python3
            yarn global add node-gyp

            matrix_task="$1"
            case "${matrix_task}" in
            vscode-reh-web-linux-x64*)
              sudo apt install g++ libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev
              yarn || yarn
              yarn gulp $matrix_task
              ;;
            vscode-reh-web-linux-arm64*)
              sudo apt install qemu-user-static binfmt-support debootstrap gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              TARGET=aarch64-linux-gnu
              SYSROOT=${PWD}/../aarch64-linux-ubuntu
              ## aarch64 rootfs
              sudo debootstrap --variant=minbase --arch=arm64 --include="libx11-dev,libxkbfile-dev,libsecret-1-dev,libkrb5-dev" stable "${SYSROOT}" http://deb.debian.org/debian/
              export CC="$(which ${TARGET}-gcc) --sysroot=${SYSROOT}"
              export CXX="$(which ${TARGET}-g++) --sysroot=${SYSROOT}"
              export npm_config_arch=aarch64
              yarn || yarn
              yarn gulp $matrix_task
              ;;
            vscode-reh-web-android-arm64*)
              ## Modify based on linux-arm64
              build_task "$(echo "${matrix_task}" | sed 's/android/linux/')"
              echo "Patching for android..."
              _RELEASE_DIR="${PWD}/../vscode-reh-web-android-arm64"
              mv "${PWD}/../vscode-reh-web-linux-arm64" "${_RELEASE_DIR}"

              export npm_config_arch=aarch64
              export GYP_DEFINES="host_os=linux OS=android"

              ## Android libutil
              _TMP_BUILD_DIR="${PWD}/../tmp_build"
              mkdir -p "${_TMP_BUILD_DIR}/lib"
              echo "INPUT(-lc)" >"${_TMP_BUILD_DIR}/lib/libutil.so"

              NDK_BIN_DIR=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
              TARGET=aarch64-linux-android24

              NDK_BIN_DIR=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
              export CC="$(command -v "${NDK_BIN_DIR}/clang++") --target=${TARGET}"
              export CXX="$(command -v "${NDK_BIN_DIR}/clang++") --target=${TARGET} -L${_TMP_BUILD_DIR}/lib"

              replace_watcher() {
                (
                  dir=$(find "$1" -name "watcher" -path "*/node_modules/@parcel/watcher")
                  test $? -ne 0 && exit 1
                  echo "replacing watcher (${dir})"
                  cd "${dir}/.."
                  curl -Lks https://registry.npmjs.org/@parcel/watcher-android-arm64/-/watcher-android-arm64-2.3.0.tgz | gzip -d | tar -x
                  # curl -Lks https://registry.npmmirror.com/@parcel/watcher-android-arm64/-/watcher-android-arm64-2.3.0.tgz | gzip -d | tar -x
                  rm -rf watcher
                  mv package watcher
                )
              }

              replace_in_dir() {
                _RELEASE_DIR="$1"
                shift
                echo replacing modules ...
                for module_name in "$@"; do
                find "${_RELEASE_DIR}" \( -path "*/node_modules/${module_name}" -or -path "*/node_modules/@*/${module_name}" \) -prune | while IFS= read -r module_dir; do
                    echo "replacing ${module_name} (${module_dir})"
                    if test -d "${_TMP_BUILD_DIR}/node_modules/${module_name}"; then
                      rm -rf "${module_dir}" && cp -r "${_TMP_BUILD_DIR}/node_modules/${module_name}" "$(dirname "${module_dir}")"
                    else
                      echo "Warn: ${_TMP_BUILD_DIR}/node_modules/${module_name} not exists!"
                      fi
                  done
                done
              }

              replace_node() {
                echo "replacing node"
                node_version="$(node -v)"
                curl -Lk https://github.com/zongou/build-workflow/releases/download/0.0.0/nodejs-${node_version}-android24-arm64.tar.gz | gzip -d | tar -x "nodejs-${node_version}-android24-arm64/bin/node" -O >"${_RELEASE_DIR}/node"
                chmod +x "${1}/node"
              }
              
              ## Build modules
              (cd "${_TMP_BUILD_DIR}" && yarn add @vscode/spdlog node-pty)
              replace_in_dir "${_RELEASE_DIR}" @vscode/spdlog node-pty
              replace_watcher "${_RELEASE_DIR}"
              replace_node "${_RELEASE_DIR}"
              ;;
            esac
          }

          build_task "${{ matrix.tasks}}"

      - name: Test output
        run: |
          tree -L 1

      - name: Package
        run: |
          find -maxdepth 1 -name "vscode-*" -type d | while IFS= read -r dir; do
            tar -c "${dir}" | xz -T0 > "${dir}".tar.xz
          done

      - name: Upload
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.tasks }}
          path: vscode-*.tar.xz
